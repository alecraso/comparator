#!/usr/bin/env python3
import os
import shutil
import subprocess
import sys
import tempfile


def system(*args, **kwargs):
    kwargs.setdefault('stdout', subprocess.PIPE)
    try:
        proc = subprocess.Popen(args, **kwargs)
        out, err = proc.communicate()
    except OSError:
        print "error: could not execute %r" % " ".join(args)
        sys.exit(1)
    return out


ignore_list = [
]


class Tester(object):
    def __init__(self):
        self.folder = tempfile.mkdtemp()
        self.has_file = False

    def should_test_file(self, name):
        return False

    def test(self):
        return True

    def add_file(self, name):
        if not self.should_test_file(name):
            return

        self.has_file = True

        filename = os.path.join(self.folder, name)
        filepath = os.path.dirname(filename)

        if not os.path.exists(filepath):
            os.makedirs(filepath)

        with file(filename, 'w') as f:
            system('git', 'show', ':' + name, stdout=f)

    def __del__(self):
        shutil.rmtree(self.folder)


class PythonTester(Tester):
    def should_test_file(self, name):
        if not name.endswith('.py'):
            return False

        for entry in ignore_list:
            if entry in name:
                return False

        return True

    def test(self):
        if not self.has_file:
            return True

        if system('which', 'flake8'):
            # run flake8
            print "running hook - flake8"

            output = system('flake8', '.', cwd=self.folder)

            if output:
                print output
                return False

            return True

        else:
            passes = True
            # run pep8
            print "running hook - pep8"

            output = system('pep8', '.', cwd=self.folder)

            if output:
                passes = False
                print output

            # run pyflakes
            print "running hook - pyflakes"
            output = system('pyflakes', '.', cwd=self.folder)
            if output:
                passes = False
                print output

            return passes


def main():
    print "running pre-commit hooks"
    buckets = (
        PythonTester(),
    )

    for filename in system('git', 'diff',
                           '--name-only', '--staged',
                           '--diff-filter=AM').splitlines():
        for test in buckets:
            test.add_file(filename)

    allow_commit = True
    for test in buckets:
        allow_commit = allow_commit & test.test()

    del buckets

    if allow_commit:
        sys.exit(0)
    else:
        sys.exit(1)


if __name__ == '__main__':
    main()
